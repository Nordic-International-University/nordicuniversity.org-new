import type { Metadata } from "next";
import { Montserrat } from "next/font/google";
import "../globals.css";
import React from "react";
import TopNav from "@/app/components/main/top.nav";
import Nav from "@/app/components/main/nav";
import MainFooter from "@/app/components/main/MainFooter";
import { getMessages } from "next-intl/server";
import { NextIntlClientProvider } from "next-intl";
import { StoreProvider } from "@/app/utils/provider/storeProvider";
import { getCurrentLangServer } from "@/app/helpers/getLangForServer";

const getAllResources = async () => {
  const response = await fetch(
    `${process.env.NEXT_PUBLIC_URL_BACKEND}/api/education/resources?language=${await getCurrentLangServer()}`,
    {
      cache: "no-cache",
    },
  );
  const json = await response.json();
  return json;
};

const getAllNetworks = async () => {
  const response = await fetch(
    `${process.env.NEXT_PUBLIC_URL_BACKEND}/api/core/social-network?page=1&limit=4`,
    {
      cache: "no-cache",
    },
  );
  const json = await response.json();
  return json;
};

const inter = Montserrat({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Nordic - University",
  description: "Generated by create next app",
  icons: {
    icon: "/favicon.ico",
  },
};

interface RootLayoutProps {
  children: React.ReactNode;
  params: { locale: string };
}

export default async function RootLayout({
  children,
  params,
}: RootLayoutProps) {
  const messages = await getMessages();
  const networks = await getAllNetworks();
  const resources = await getAllResources();

  return (
    <html lang={params.locale}>
      <body
        className={`${inter.className} flex flex-col overflow-x-hidden min-h-screen`}
      >
        <NextIntlClientProvider locale={params.locale} messages={messages}>
          <StoreProvider>
            <TopNav props={resources} networks={networks.data} />
            <Nav />
            <main className="flex-grow">{children}</main>
            <MainFooter />
          </StoreProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
